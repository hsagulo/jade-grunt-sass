{
  "name": "express-meta-tags",
  "author": {
    "name": "https://github.com/bluesman"
  },
  "description": "ExpressJS Middleware uses redis to store/manage meta data for site pages",
  "version": "0.0.6",
  "keywords": [
    "meta tags",
    "seo",
    "expressjs",
    "redis"
  ],
  "dependencies": {
    "async": "0.2.x",
    "redis": "0.7.x",
    "csv": "0.3.x",
    "optimist": "0.6.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bluesman/express-meta-tags.git"
  },
  "engine": {
    "node": ">=0.8.6"
  },
  "readme": "express-meta-tags\n==================\n\nThis is a very simple meta tag manager for your ExpressJs app. The middleware uses redis to store and manage meta tag data for your webpages.\n\nInstall with:\n\n\tnpm install express-meta-tags\n\n## Features\n* Bulk import meta tag data into redis from csv or url (think google doc spreadsheet)\n* Meta tag data keyed by req.url and loaded on each request\n* Use RegEx to control which urls should have meta tag data fetched\n* Support for rel=\"canonical\"\n\n##Usage\n\n## Put together a CSV with your meta tag data\n\n\tURL,CANONICAL,TITLE,DESCRIPTION\n\t/about-us,,\"All About Us\",\"A bunch of info about who we are\"\n\t/,,\"The Home Page\",\"Description of the home page\"\n\t/index,/,\"\",\"\"\n\n## Load your meta tag data into redis\n\n\tnode bin/bulk-load.js -h redis.domain.com -p 6379 --prefix meta-tags meta-tags.csv\n\t\nOR\n\t\n\tnode bin/bulk-load.js -h redis.domain.com -p 6379 --prefix meta-tags \"https://docs.google.com/spreadsheet/pub?key=0AlQen94blI0ddGZXVHBsdkswTlZLaXFMNFhUQlhJZHc&output=csv\"\n\t\n### Notes:\n\n* Make sure you put any urls in quotes\n* Your CSV must have a header row.  The header values will be uppercased before they are stored in redis.\n\n## Add middleware in your app.js\n\n```js\n\n\tapp.use(require('express-meta-tags')({\n\t\tignore: /^\\/(images|js|css)/,\n\t\tprefix:'meta-tags',\n\t\tnamespace:'meta',\n\t\tredis: {\n\t\t\thost: app.settings.redishost || 'localhost',\n\t\t\tport: app.settings.redisport || '6379',\n\t\t\topts: {}\n\t\t}\n\t}));\n\n\t/* if you want it available in your view */\n\tapp.use(function(req, res, next) {\n\t\tres.locals.meta = req.meta;\n\t});\n\n```\n\n##Use your meta tag data in your template\n\n\t- var title       = (typeof meta.TITLE       !== \"undefined\") ? meta.TITLE       : 'A default title';\n\t- var description = (typeof meta.DESCRIPTION !== \"undefined\") ? meta.DESCRIPTION : 'A default description';\n\t- var canonical   = (typeof meta.CANONICAL   !== \"undefined\") ? meta.CANONICAL   : false;\n\n\ttitle #{title}\n\tmeta(charset=\"utf-8\")\n\tmeta(name=\"description\", content=\"#{description}\")\n\t- if (canonical)\n  \t\tlink(rel=\"canonical\", href=\"#{canonical}\")\n\n##Options\n\n###prefix\n\na string to prepend to the redis key.  The redis key looks like this: `<prefix>:<req.url>`. for example,\n\n\tmeta-tags:/about-us\n\nwould act as the key for the meta data for the /about-us url\n\n###namespace\n\na string which will be the key in the req obj.  Essentially, req[opts.namespace] = metaTagData.\n\n###accept\n\na regular expression. If opts.accept.test(req.url) is true, meta tag data will be fetched using the key: `<prefix>:<req.url>`\n\n###ignore\n\na regular expression. If opts.ignore.test(req.url) is true, meta tag data will `not` be fetched. If opts.accept is defined, opts.ignore will only be in effect if opts.accept.test(req.url) is false.\n\n\n###redis\n\na js object containing the connection config for redis (uses: [node-redis](https://github.com/mranney/node_redis))\n\n```js\n\t{\n\t\thost: <host>,\n\t\tport: <port>,\n\t\topts: <node-redis opts>\n\t}\n```\n\n## Importing Data\n\nYou can get your meta data into redis using `bin/bulk-load.js`.\n\n\tImport a csv containing meta tag data for urls.\n\n\tUsage: node ./bulk-load.js <file|\"url\">\n\n\t*note: if using a url - be sure to put quotes around it.\n\n\tOptions:\n  \t-p, --port    redis port                               [default: 6379]\n  \t-h, --host    redis host                               [default: \"localhost\"]\n  \t-a, --prefix  prefix redis key to namespace your data  [default: \"meta-tag\"]\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bluesman/express-meta-tags/issues"
  },
  "_id": "express-meta-tags@0.0.6",
  "dist": {
    "shasum": "cd751a019305bd7a5519a5b8168cb7b44d2372c5",
    "tarball": "https://registry.npmjs.org/express-meta-tags/-/express-meta-tags-0.0.6.tgz"
  },
  "_from": "express-meta-tags@latest",
  "_npmVersion": "1.2.21",
  "_npmUser": {
    "name": "bluesman",
    "email": "tom@tomwalpole.com"
  },
  "maintainers": [
    {
      "name": "bluesman",
      "email": "tom@tomwalpole.com"
    }
  ],
  "directories": {},
  "_shasum": "cd751a019305bd7a5519a5b8168cb7b44d2372c5",
  "_resolved": "https://registry.npmjs.org/express-meta-tags/-/express-meta-tags-0.0.6.tgz"
}
